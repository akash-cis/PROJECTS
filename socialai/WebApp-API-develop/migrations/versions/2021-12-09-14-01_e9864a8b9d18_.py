"""empty message

Revision ID: e9864a8b9d18
Revises: 1a28a6a47d2f
Create Date: 2021-12-09 14:01:26.872517

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e9864a8b9d18'
down_revision = '1a28a6a47d2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('review',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('head', sa.String(length=100), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('review_message_template',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('location')
    op.drop_table('sf_lead_status_mapping')
    op.drop_table('sf_lead_source')
    op.drop_table('sf_extract_history')
    op.drop_table('region')
    op.drop_table('sf_appointment')
    op.drop_table('sf_location')
    op.drop_table('sf_user')
    op.drop_table('lead_user')
    op.drop_table('sf_vehicles')
    op.drop_table('sf_extracted_lead')
    op.drop_constraint('appointment_location_id_fkey', 'appointment', type_='foreignkey')
    op.drop_column('appointment', 'location_id')
    op.drop_column('appointment_history', 'location_id')
    op.drop_constraint('company_working_hours_location_id_fkey', 'company_working_hours', type_='foreignkey')
    op.drop_column('company_working_hours', 'location_id')
    op.drop_column('crm_integration', 'sf_certificate_key')
    op.drop_column('crm_integration', 'sf_api_user')
    op.drop_column('crm_integration', 'sf_api_url')
    op.drop_column('crm_integration', 'sf_api_key')
    op.drop_constraint('leads_location_id_fkey', 'leads', type_='foreignkey')
    op.drop_column('leads', 'location_id')
    op.drop_constraint('user_location_id_fkey', 'user', type_='foreignkey')
    op.drop_constraint('user_region_id_fkey', 'user', type_='foreignkey')
    op.drop_column('user', 'location_id')
    op.drop_column('user', 'region_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('region_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('user_region_id_fkey', 'user', 'region', ['region_id'], ['id'])
    op.create_foreign_key('user_location_id_fkey', 'user', 'location', ['location_id'], ['id'])
    op.add_column('leads', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('leads_location_id_fkey', 'leads', 'location', ['location_id'], ['id'])
    op.add_column('crm_integration', sa.Column('sf_api_key', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('crm_integration', sa.Column('sf_api_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('crm_integration', sa.Column('sf_api_user', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('crm_integration', sa.Column('sf_certificate_key', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('company_working_hours', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('company_working_hours_location_id_fkey', 'company_working_hours', 'location', ['location_id'], ['id'])
    op.add_column('appointment_history', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('appointment', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('appointment_location_id_fkey', 'appointment', 'location', ['location_id'], ['id'])
    op.create_table('sf_extracted_lead',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sf_extracted_lead_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sf_extract_history_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sf_lead_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lead_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sf_lead_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sf_create_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sf_modified_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_status_mapping_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('crm_integration_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sf_converted_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_converted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sf_location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_note_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['crm_integration_id'], ['crm_integration.id'], name='sf_extracted_lead_crm_integration_id_fkey'),
    sa.ForeignKeyConstraint(['sf_extract_history_id'], ['sf_extract_history.id'], name='sf_extracted_lead_sf_extract_history_id_fkey'),
    sa.ForeignKeyConstraint(['sf_lead_source_id'], ['sf_lead_source.id'], name='sf_extracted_lead_sf_lead_source_id_fkey'),
    sa.ForeignKeyConstraint(['sf_lead_status_mapping_id'], ['sf_lead_status_mapping.id'], name='sf_extracted_lead_sf_lead_status_mapping_id_fkey'),
    sa.ForeignKeyConstraint(['sf_location_id'], ['sf_location.id'], name='sf_extracted_lead_sf_location_id_fkey'),
    sa.ForeignKeyConstraint(['sf_user_id'], ['sf_user.id'], name='sf_extracted_lead_sf_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_extracted_lead_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sf_vehicles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sf_vehicle_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lead_vehicle_of_interest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lead_vehicle_of_interest_id'], ['lead_vehicle_of_interest.id'], name='sf_vehicles_lead_vehicle_of_interest_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_vehicles_pkey')
    )
    op.create_table('lead_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lead_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], name='lead_user_lead_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='lead_user_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lead_user_pkey')
    )
    op.create_table('sf_user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sf_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sf_user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('crm_integration_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['crm_integration_id'], ['crm_integration.id'], name='sf_user_crm_integration_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='sf_user_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sf_location',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sf_location_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sf_location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('crm_integration_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['crm_integration_id'], ['crm_integration.id'], name='sf_location_crm_integration_id_fkey'),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], name='sf_location_location_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_location_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sf_appointment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sf_event_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('appointment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_extracted_lead_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointment.id'], name='sf_appointment_appointment_id_fkey'),
    sa.ForeignKeyConstraint(['sf_extracted_lead_id'], ['sf_extracted_lead.id'], name='sf_appointment_sf_extracted_lead_id_fkey'),
    sa.ForeignKeyConstraint(['sf_lead_source_id'], ['sf_lead_source.id'], name='sf_appointment_sf_lead_source_id_fkey'),
    sa.ForeignKeyConstraint(['sf_user_id'], ['sf_user.id'], name='sf_appointment_sf_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_appointment_pkey'),
    sa.UniqueConstraint('sf_event_id', name='sf_appointment_sf_event_id_key')
    )
    op.create_table('region',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('region_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name='region_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='region_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sf_extract_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('extract_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('crm_integration_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['crm_integration_id'], ['crm_integration.id'], name='sf_extract_history_crm_integration_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_extract_history_pkey')
    )
    op.create_table('sf_lead_source',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lead_source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_source_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sf_lead_source_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sf_lead_source_pkey'),
    sa.UniqueConstraint('sf_lead_source_id', name='sf_lead_source_sf_lead_source_id_key')
    )
    op.create_table('sf_lead_status_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sf_lead_status_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sf_lead_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('lead_status_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lead_status_type_id'], ['lead_status_type.id'], name='sf_lead_status_mapping_lead_status_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sf_lead_status_mapping_pkey')
    )
    op.create_table('location',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address_line_1', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address_line_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('geo_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name='location_company_id_fkey'),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], name='location_region_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='location_pkey')
    )
    op.drop_table('review_message_template')
    op.drop_table('review')
    # ### end Alembic commands ###
